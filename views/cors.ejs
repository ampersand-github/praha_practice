<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
</head>
<body>
<section>
    <h1>課題3（実装）</h1>
    <p>この課題では、CORSを説明するためのモックを作成していただきます</p>
    <h1>仕様</h1>
    <p>特定のオリジンからのPOSTリクエストのみ許可</p>
    <p>それ以外のオリジンからPOSTリクエストを受けた時は、CORS制約によりアクセスが制限</p>
    <p>「Simple request」の時はpreflightが行われないこと</p>
    <p>「Simple request」に該当しないときはpreflightが行われることを証明してください</p>
    <h1>技術的な仕様</h1>
    <p>サーバはnode.jsとexpressで作成してください（以降の課題でも使うため）</p>
    <h1>課題4（成果物に関する質問）</h1>
    <p>作成した成果物に、試しにCURLで、「Simple request」に該当しないPOSTリクエストを送信してみましょう</p>
    <p>果たしてCURLからのリクエストを受けた時、CORS制約は適用されるでしょうか？</p>
    <p>その理由を説明してください</p>
</section>
<section>
    <button type="submit" onclick="simpleClickEvent()">simple</button>
    <button type="submit" onclick="preflightClickEvent()">preflight</button>

</section>
</body>
<script>
    const url = 'http://4aadcbb5d17d.ngrok.io'
    function simpleClickEvent() {
        console.log('simpleClickEvent');
        let xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function() {
            switch ( xhr.readyState ) {
                case 0:
                    // 未初期化状態.
                    console.log( 'uninitialized!' );
                    break;
                case 1: // データ送信中.
                    console.log( 'loading...' );
                    break;
                case 2: // 応答待ち.
                    console.log( 'loaded.' );
                    break;
                case 3: // データ受信中.
                    console.log( 'interactive... '+xhr.responseText.length+' bytes.' );
                    break;
                case 4: // データ受信完了.
                    if( xhr.status == 200 || xhr.status == 304 ) {
                        var data = xhr.responseText; // responseXML もあり
                        console.log( 'COMPLETE! :'+data );
                    } else {
                        console.log( 'Failed. HttpStatus: '+xhr.statusText );
                    }
                    break;
            }
        };
        xhr.open( 'POST', url + '/simple', false );
        xhr.send();
    }

    function preflightClickEvent() {
        console.log('preflightClickEvent');
        let xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function() {
            switch ( xhr.readyState ) {
                case 0:
                    // 未初期化状態.
                    console.log( 'uninitialized!' );
                    break;
                case 1: // データ送信中.
                    console.log( 'loading...' );
                    break;
                case 2: // 応答待ち.
                    console.log( 'loaded.' );
                    break;
                case 3: // データ受信中.
                    console.log( 'interactive... '+xhr.responseText.length+' bytes.' );
                    break;
                case 4: // データ受信完了.
                    if( xhr.status == 200 || xhr.status == 304 ) {
                        var data = xhr.responseText; // responseXML もあり
                        console.log( 'COMPLETE! :'+data );
                    } else {
                        console.log( 'Failed. HttpStatus: '+xhr.statusText );
                    }
                    break;
            }
        };
        xhr.open( 'POST', url + '/preflight' );
        xhr.setRequestHeader( 'Content-Type', 'application/xml' );
        xhr.send();
    }


</script>
</html>
